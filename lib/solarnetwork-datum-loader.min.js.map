{"version":3,"sources":["../src/datumLoader.js","../src/multiLoader.js"],"names":["datumExtractor","json","success","undefined","data","Array","isArray","results","pageSizeExtractor","returnedResultCount","startingOffset","totalResults","offsetExtractor","DatumLoader","urlHelper","filter","authBuilder","defineProperties","this","value","NodeDatumUrlHelper","DatumFilter","nodeIds","_finishedCallback","_urlParameters","jsonClient","_incrementalMode","_state","_results","_typeof","callback","loadData","error","done","page","args","push","apply","pagination","Pagination","url","listDatumUrl","queryParams","urlQuery","urlQueryEncode","on","request","reset","snDate","setRequestHeader","HttpHeaders","X_SN_DATE","requestDateHeaderValue","AUTHORIZATION","buildWithSavedKey","dataArray","debug","handleResults","incMode","_this","nextOffset","max","offset","concat","withOffset","Error","get","MultiLoader","loaders","_loaders","q","queue","forEach","e","defer","cb","load","awaitAll","call"],"mappings":"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","file":"lib/solarnetwork-datum-loader.min.js.map","sourcesContent":["import { json } from 'd3-request';\nimport {\n\tDatumFilter,\n\tHttpHeaders,\n\tLogger as log,\n\tNodeDatumUrlHelper,\n\tPagination,\n\turlQuery,\n} from 'solarnetwork-api-core';\n\n/**\n * @typedef {Object} Datum\n * @property {string} created the datum date\n * @property {string} sourceId the control ID\n */\n\n/**\n * The data callback function.\n * \n * @callback DatumLoader~dataCallback\n * @param {Error} [error] an error if a failure occurred\n * @param {Datum[]} data the result data\n * @param {boolean} [done] in incremental mode, will be `true` when invoked on the *last* page of data\n * @param {Pagination} [page] in incremental mode, the page associated with the data\n */\n\n/**\n * Load data for a set of source IDs, date range, and aggregate level using the `listDatumUrl()` endpoint\n * of `NodeDatumUrlHelperMixin`.\n * \n * This object is designed to be used once per query. After creating the object and configuring an\n * asynchronous callback function with {@link DatumLoader#callback}, call {@link DatumLoader#load}\n * to startloading the data. The callback function will be called once all data has been loaded. The\n * callback function can also be passed as an argument to the {@link DatumLoader#load} method directly.\n * \n * @implements {Loader}\n * @example\n * const filter = new DatumFilter();\n * filter.nodeId = 123;\n * // configure other filter settings here...\n * \n * const urlHelper = new NodeDatumUrlHelper();\n * \n * new DatumLoader(urlHelper, filter).load((error, results) => {\n *   // results is an array of Datum objects\n * });\n */\nclass DatumLoader {\n\n\t/**\n\t * Constructor.\n\t * \n     * @param {NodeDatumUrlHelperMixin} urlHelper a URL helper for accessing node datum via SolarQuery\n\t * @param {DatumFilter} filter the filter parameters to use\n\t * @param {AuthorizationV2Builder} [authBuilder] the auth builder to authenticate requests with; if not provided\n\t *                                               then only public data can be queried\n\t */\n    constructor(urlHelper, filter, authBuilder) {\n        Object.defineProperties(this, {\n                /**\n                 * The class version.\n                 * \n                 * @memberof DatumLoader\n                 * @readonly\n                 * @type {string}\n                 */\n                version: { value: '1.0.0' }\n\t\t});\n\n\t\t/** @type {NodeDatumUrlHelper} */\n\t\tthis.urlHelper = urlHelper || new NodeDatumUrlHelper();\n\n\t\t/** @type {DatumFilter} */\n\t\tthis.filter = filter || new DatumFilter({nodeIds:this.urlHelper.nodeIds});\n\n\t\t/** @type {AuthorizationV2Builder} */\n\t\tthis.authBuilder = authBuilder;\n\n        /**\n\t\t * @type {DatumLoader~dataCallback}\n\t\t * @private\n\t\t */\n        this._finishedCallback = undefined;\n\n        /**\n\t\t * @type {object}\n\t\t * @private\n\t\t */\n\t\tthis._urlParameters = undefined;\n\t\t\n        /**\n\t\t * @type {json}\n\t\t * @private\n\t\t */\n\t\tthis.jsonClient = json;\n\t\t\n\t\t/**\n\t\t * When `true` then call the callback function for every page of data as it becomes available.\n\t\t * Otherwise the callback function will be invoked only after all data has been loaded.\n\t\t * @type {boolean}\n\t\t * @private\n\t\t */\n\t\tthis._incrementalMode = false;\n\n\t\t/**\n\t\t * @type {number}\n\t\t * @private\n\t\t */\n\t\tthis._state = 0;\n\n\t\t/**\n\t\t * @type {Datum[]}\n\t\t * @private\n\t\t */\n\t\tthis._results = undefined;\n    }\n\n\t/**\n\t * Get or set a JSON client function to use. The function must be compatible with `d3.json`\n\t * and defaults to that.\n\t *\n\t * @param {function} [value] the JSON client function, compatible with `d3.json`\n\t * @returns {function|DatumLoader} when used as a getter, the JSON client function, otherwise this object\n\t */\n\tclient(value) {\n        if ( !value ) return this.jsonClient;\n\t\tif ( typeof value === 'function' ) {\n\t\t\tthis.jsonClient = value;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get or set the callback function, invoked after all data has been loaded. The callback\n\t * function will be passed two arguments: an error and the results. In incremental mode,\n\t * the callback will also be passed a boolean that will be `true` on that last page of data,\n\t * and a `Pagination` that details which page the callback represents.\n\t *\n\t * @param {DatumLoader~dataCallback} [value] the callback function to use\n\t * @returns  {DatumLoader~dataCallback|DatumLoader} when used as a getter, the current callback function, otherwise this object\n\t */\n\tcallback(value) {\n\t\tif ( !value ) { return this._finishedCallback; }\n\t\tif ( typeof value === 'function' ) {\n\t\t\tthis._finishedCallback = value;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get or set additional URL parameters. The parameters are set as object properties.\n\t * If a property value is an array, multiple parameters for that property will be added.\n\t *\n\t * @param {object} [value] the URL parameters to include with the JSON request\n\t * @returns {object|DatumLoader} when used as a getter, the URL parameters, otherwise this object\n\t */\n    parameters(value) {\n\t\tif ( !value ) return this._urlParameters;\n\t\tif ( typeof value === 'object' ) {\n\t\t\tthis._urlParameters = value;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get or set _incremental mode_ for loading the data.\n\t * \n\t * When incremental mode is enabled (set to `true`) then the callback function will be invoked\n\t * for _each result page_ that is loaded. The function will be passed a second `boolean` argument\n\t * that will be set to `true` only on the last page of result data, and a third Pagination`\n\t * object argument that details the starting offset of the page.\n\t * \n\t * When incremental mode is disabled (set to `false`, the default) then all result pages are\n\t * combined into a single array and the callback will be invoked just once.\n\t * \n\t * @param {boolean} [value] the incremental mode to set \n\t * @returns {boolean|DatumLoader} when used a a getter, the incremental mode; otherwise this object\n\t */\n\tincremental(value) {\n\t\tif ( value === undefined ) return this._incrementalMode;\n\t\tthis._incrementalMode = !!value;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Initiate loading the data.\n\t * \n\t * As an alternative to configuring the callback function via the {@link DatumLoader#callback}\n\t * method,a callback function can be passed as an argument to this function. That allows this\n\t * function to be passed to things like `queue.defer`, for example.\n\t *\n\t * @param {DatumLoader~dataCallback} [callback] a callback function to use; either this argument must be provided\n\t *                              or the function must have already been configured via {@link DatumLoader#callback}\n\t * @returns {DatumLoader} this object\n\t */\n\tload(callback) {\n\t\t// to support queue use, allow callback to be passed directly to this function\n\t\tif ( typeof callback === 'function' ) {\n\t\t\tthis._finishedCallback = callback;\n\t\t}\n\t\tthis._state = 1;\n\t\tthis.loadData();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Invoke the configured callback function.\n\t * \n\t * @param {Error} [error] an optional  error\n\t * @param {boolean} done `true` if there is no more data to load\n\t * @param {Pagination} [page] the incremental mode page\n\t * @returns {void}\n\t * @private\n\t */\n\thandleResults(error, done, page) {\n\t\tif ( done ) {\n\t\t\tthis._state = 2; // done\n\t\t}\n\n\t\tif ( this._finishedCallback ) {\n\t\t\tlet args = [error, this._results];\n\t\t\tif ( this._incrementalMode ) {\n\t\t\t\targs.push(done);\n\t\t\t\targs.push(page);\n\t\t\t}\n\t\t\tthis._finishedCallback.apply(this, args);\n\t\t}\n\t}\n\n\t/**\n\t * Load a single page of data, starting at a specific offset.\n\t * \n\t * @param {Pagination} [page] the page to load\n\t * @returns {void}\n\t * @private\n\t */\n\tloadData(page) {\n\t\tlet pagination = (page instanceof Pagination ? page : new Pagination());\n\t\tlet url = this.urlHelper.listDatumUrl(this.filter, undefined, pagination);\n\t\tif ( this._urlParameters ) {\n\t\t\tlet queryParams = urlQuery.urlQueryEncode(this._urlParameters);\n\t\t\tif ( queryParams ) {\n\t\t\t\turl += '&' + queryParams;\n\t\t\t}\n\t\t}\n\t\tconst authBuilder = this.authBuilder;\n\t\tthis.jsonClient(url)\n\t\t\t.on('beforesend', (request) => {\n\t\t\t\tif ( !authBuilder ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tauthBuilder.reset().snDate(true).url(url);\n\t\t\t\trequest.setRequestHeader(HttpHeaders.X_SN_DATE, authBuilder.requestDateHeaderValue);\n\t\t\t\trequest.setRequestHeader(HttpHeaders.AUTHORIZATION, authBuilder.buildWithSavedKey());\n\t\t\t}).on('load', (json) => {\n\t\t\t\tlet dataArray = datumExtractor(json);\n\t\t\t\tif ( dataArray === undefined ) {\n\t\t\t\t\tlog.debug('No data available for %s', url);\n\t\t\t\t\tthis.handleResults();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tconst incMode = this._incrementalMode;\n\t\t\t\tconst nextOffset = offsetExtractor(json);\n\n\t\t\t\tif ( this._results === undefined || incMode ) {\n\t\t\t\t\tthis._results = dataArray;\n\t\t\t\t\t\n\t\t\t\t\t// discover page size, if pagination does not already have one\n\t\t\t\t\tif ( pagination.max < 1 ) {\n\t\t\t\t\t\tconst max = pageSizeExtractor(json);\n\t\t\t\t\t\tif ( max > 0 ) {\n\t\t\t\t\t\t\tpagination = new Pagination(max, pagination.offset);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( incMode ) {\n\t\t\t\t\t\tthis.handleResults(undefined, nextOffset < 1, pagination);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis._results = this._results.concat(dataArray);\n\t\t\t\t}\n\n\t\t\t\t// see if we need to load more results\n\t\t\t\tif ( nextOffset > 0 ) {\n\t\t\t\t\tthis.loadData(pagination.withOffset(nextOffset));\n\t\t\t\t} else if ( !incMode ) {\n\t\t\t\t\tthis.handleResults(undefined, true);\n\t\t\t\t}\n\t\t\t}).on('error', (error) => {\n\t\t\t\tlog.error('Error requesting data for %s: %s', url, error);\n\t\t\t\tthis.handleResults(new Error(`Error requesting data for ${url}: ${error}`));\n\t\t\t})\n\t\t\t.get();\n\t}\n\n}\n\n/**\n * Extract the datum list from the returned data.\n * \n * @param {object} json the JSON results to extract from\n * @returns {Datum[]} the extracted data\n * @private\n */\n\nfunction datumExtractor(json) {\n\tif ( json.success !== true || json.data === undefined || Array.isArray(json.data.results) !== true ) {\n\t\treturn undefined;\n\t}\n\treturn json.data.results;\n}\n\n/**\n * Extract the page size from the returned data.\n * \n * @param {object} json the JSON results to extract from\n * @returns {number} the extracted page size\n * @private\n */\nfunction pageSizeExtractor(json) {\n\tconst data = json.data;\n\treturn (data.returnedResultCount + data.startingOffset < data.totalResults\n\t\t\t? data.returnedResultCount\n\t\t\t: 0);\n}\n\n/**\n * Extract the \"next\" offset to use based on the returned data.\n * \n * @param {object} json the JSON results to extract from\n * @returns {number} the extracted offset\n * @private\n */\nfunction offsetExtractor(json) {\n\tconst data = json.data;\n\treturn (data.returnedResultCount + data.startingOffset < data.totalResults\n\t\t\t? (data.returnedResultCount + data.startingOffset)\n\t\t\t: 0);\n}\n\nexport default DatumLoader;\n","import { queue } from 'd3-queue';\n\n/**\n * Interface for classes that can be used to load data for {@link MultiLoader}.\n *\n * @interface Loader\n */\n\n /**\n * The loader callback function.\n * \n * @callback Loader~dataCallback\n * @param {Error} [error] an error if a failure occurred\n * @param {Object} data the result data\n */\n\n/**\n * Load data asynchronously with a callback.\n *\n * @function\n * @name Loader#load\n * @param {Loader~dataCallback} callback the callback to invoke with the results\n * @returns {Loader} the loader object\n */\n\n/**\n * The data callback function.\n * \n * @callback MultiLoader~dataCallback\n * @param {Error} [error] an error if a failure occurred\n * @param {Object[]} data the result data from all loaders\n */\n\n/**\n * Load data from multiple {@link Loader} objects, invoking a callback function\n * after all data has been loaded. Call {@link MultiLoader#load} to start loading the data.\n * \n * The {@link DatumLoader} class conforms to the {@link Loader} interface, so can be used to\n * load arrays of {@link Datum} objects based on search criteria.\n * \n * @example\n * const filter1 = new DatumFilter();\n * filter1.nodeId = 123;\n * // configure other filter settings here...\n * \n * const filter2 = new DatumFilter();\n * filter2.nodeId = 234;\n * // configure other filter settings here\n * \n * const urlHelper = new NodeDatumUrlHelper();\n * \n * new MultiLoader([\n *   new DatumLoader(urlHelper, filter1),\n *   new DatumLoader(urlHelper, filter2),\n * ]).load((error, results) => {\n *   // results is a 2-element array of Datum arrays\n * });\n */\nclass MultiLoader {\n    \n\t/**\n\t * Constructor.\n\t *\n\t * @param {Loader[]} loaders - array of loader objects\n\t */\n    constructor(loaders) {\n        Object.defineProperties(this, {\n                /**\n                 * The class version.\n                 * \n                 * @memberof MultiLoader\n                 * @readonly\n                 * @type {string}\n                 */\n                version: { value: '1.0.0' }\n\t\t});\n\n\t\t/**\n\t\t * @type {Loader[]}\n\t\t * @private\n\t\t */\n\t\tthis._loaders = loaders;\n\t\t\n\t\t/**\n\t\t * @type {MultiLoader~dataCallback}\n\t\t * @private\n\t\t */\n\t\tthis._finishedCallback = undefined;\n\t\t\n    }\n\n\t/**\n\t * Initiate loading the data. This will call {@link Loader#load} on each\n\t * supplied loader, in parallel. As an alternative to configuring the callback function via\n\t * the {@link MultiLoader#callback} method, a callback function can be passed as an argument\n\t * to this function. This allows this function to be passed to `queue.defer`, for example.\n\t *\n\t * @param {MultiLoader~dataCallback} [callback] a callback function to use; either this argument must be provided\n\t *                              or the function must have already been configured via  {@link MultiLoader#callback}\n\t * @returns {MultiLoader} this object\n\t */\n\tload(callback) {\n\t\t// to support queue use, allow callback to be passed directly to this function\n\t\tif ( typeof callback === 'function' ) {\n\t\t\tthis._finishedCallback = callback;\n\t\t}\n\t\tconst q = queue();\n\t\tthis._loaders.forEach((e) => {\n\t\t\t// queue.defer will invoke the callback with a `null` `this` object, so can't pass `e.load` directly here\n\t\t\tq.defer((cb) => {\n\t\t\t\te.load(cb);\n\t\t\t});\n\t\t});\n\t\tq.awaitAll((error, results) => {\n\t\t\tif ( this._finishedCallback ) {\n\t\t\t\tthis._finishedCallback.call(this, error, results);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get or set the callback function, invoked after all data has been loaded. The callback\n\t * function will be passed two arguments: an error and the results as an array of results\n\t * from each configured {@link Loader}.\n\t *\n\t * @param {MultiLoader~dataCallback} [value] the callback function to use\n\t * @returns  {MultiLoader~dataCallback|MultiLoader} when used as a getter, the current callback function, otherwise this object\n\t */\n\tcallback(value) {\n\t\tif ( !value ) { return this._finishedCallback; }\n\t\tif ( typeof value === 'function' ) {\n\t\t\tthis._finishedCallback = value;\n\t\t}\n\t\treturn this;\n\t}\n\n}\n\nexport default MultiLoader;\n"]}