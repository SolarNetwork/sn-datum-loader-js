{"version":3,"sources":["../src/datumRangeFinder.js","../src/datumLoader.js","../src/multiLoader.js"],"names":["extractReportableInterval","results","result","repInterval","i","length","undefined","data","endDate","endDateMillis","startDateMillis","startDate","debug","this","_helpers","nodeId","sourceIds","join","datumExtractor","json","success","Array","isArray","pageSizeExtractor","returnedResultCount","startingOffset","totalResults","offsetExtractor","DatumRangeFinder","urlHelpers","authBuilder","NodeDatumUrlHelper","jsonClient","value","Promise","resolve","reject","exec","error","callback","q","queue","auth","_step","Symbol","iterator","_iteratorNormalCompletion","_iterator","next","done","urlHelper","url","reportableIntervalUrl","req","on","request","reset","snDate","setRequestHeader","HttpHeaders","X_SN_DATE","requestDateHeaderValue","AUTHORIZATION","buildWithSavedKey","defer","get","awaitAll","intervalObj","sDate","Date","eDate","DatumLoader","filter","defineProperties","DatumFilter","nodeIds","_finishedCallback","_urlParameters","_incrementalMode","_state","_results","_typeof","loadData","page","args","push","apply","pagination","Pagination","listDatumUrl","queryParams","urlQuery","urlQueryEncode","dataArray","handleResults","incMode","_this","nextOffset","max","offset","concat","withOffset","Error","MultiLoader","loaders","_loaders","forEach","e","cb","load","call"],"mappings":"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","file":"lib/solarnetwork-datum-loader.min.js.map","sourcesContent":["import { json } from 'd3-request';\nimport { queue } from 'd3-queue';\nimport {\n\tHttpHeaders,\n\tLogger as log,\n\tNodeDatumUrlHelper,\n} from 'solarnetwork-api-core';\n\n/**\n * @typedef {Object} DatumRange\n * @property {number} startDateMillis the start of the time range, in milliseconds since the epoch\n * @property {number} endDateMillis the end of the time range, in milliseconds since the epoch\n * @property {Date} sDate the start of the time range\n * @property {Date} eDate the end of the time range\n */\n\n/**\n * The data callback function.\n * \n * @callback DatumRangeFinder~dataCallback\n * @param {Error} [error] an error if a failure occurred\n * @param {DatumRange} data the result data\n */\n\n/**\n * Class to find the available datum date range for a set of node datum URL helpers.\n * \n * This is useful when generating reports or charts for a set of SolarNode datum streams,\n * so the overall start/end dates can be determined before requesting the actual data.\n * \n * @example\n * // the simple case, for just one SolarNode\n * const urlHelper = new NodeDatumUrlHelper();\n * urlHelper.publicQuery = true;\n * urlHelper.nodeId = 123;\n * urlHelper.sourceIds = ['a', 'b'];\n * const range = await new DatumRangeFinder(urlHelper).do();\n * \n * @example\n * // more complex case, for multiple SolarNode / source ID combinations\n * const urlHelper2 = new NodeDatumUrlHelper();\n * urlHelper2.publicQuery = true;\n * urlHelper2.nodeId = 234;\n * urlHelper2.sourceId = 'c';\n * const range2 = await new DatumRangeFinder([urlHelper, urlHelper2]).do();\n * \n * @example\n * // with authentication; note the authentication must be valid for all SolarNodes!\n * const auth = new AuthorizationV2Builder('my-token');\n * auth.saveSigningKey('secret');\n * urlHelper.publicQuery = false;\n * urlHelper2.publicQuery = false;\n * const range3 = await new DatumRangeFinder([urlHelper, urlHelper2], auth).do();\n */\nclass DatumRangeFinder {\n    \n    /**\n     * Constructor.\n     * \n     * @param {NodeDatumUrlHelper|NodeDatumUrlHelper[]} urlHelpers the helper(s) to find the avaialble data range for\n\t * @param {AuthorizationV2Builder} [authBuilder] the auth builder to authenticate requests with; if not provided\n\t *                                               then only public data can be queried\n     */\n    constructor(urlHelpers, authBuilder) {\n        /** @type {NodeDatumUrlHelper[]} */\n        this._helpers = Array.isArray(urlHelpers) ? urlHelpers : urlHelpers ? [urlHelpers] : [new NodeDatumUrlHelper()];\n\n        /** @type {AuthorizationV2Builder} */\n\t\tthis.authBuilder = authBuilder;\n        \n        /**\n\t\t * @type {json}\n\t\t * @private\n\t\t */\n\t\tthis.jsonClient = json;\n    }\n\n\t/**\n\t * Get or set a JSON client function to use. The function must be compatible with `d3.json`\n\t * and defaults to that.\n\t *\n\t * @param {function} [value] the JSON client function, compatible with `d3.json`\n\t * @returns {function|DatumRangeFinder} when used as a getter, the JSON client function, otherwise this object\n\t */\n\tclient(value) {\n        if ( !value ) return this.jsonClient;\n\t\tif ( typeof value === 'function' ) {\n\t\t\tthis.jsonClient = value;\n\t\t}\n\t\treturn this;\n    }\n    \n    /**\n     * Asynchronously find the available datum range.\n     * \n     * @returns {Promise<DatumRange>} the result promise\n     */\n    do() {\n        return new Promise((resolve, reject) => {\n            this.exec((error, results) => {\n                if ( error ) {\n                    reject(error);\n                } else {\n                    resolve(results);\n                }\n            });\n        });\n    }\n\n    /**\n     * Asynchronously find the available datum range using a callback.\n     * \n     * @param {DatumRangeFinder~dataCallback} callback the callback function to invoke\n     * @returns {void}\n     */\n    exec(callback) {\n        const q = queue();\n        const jsonClient = this.jsonClient;\n        const auth = this.authBuilder;\n        for ( const urlHelper of this._helpers ) {\n            const url = urlHelper.reportableIntervalUrl();\n            const req = jsonClient(url);\n            if ( auth ) {\n                req.on('beforesend', (request) => {\n                    auth.reset().snDate(true).url(url);\n                    request.setRequestHeader(HttpHeaders.X_SN_DATE, auth.requestDateHeaderValue);\n                    request.setRequestHeader(HttpHeaders.AUTHORIZATION, auth.buildWithSavedKey());\n                });\n            }\n            q.defer(req.get, null);\n\t\t}\n        q.awaitAll((error, results) => {\n            if ( error ) {\n                log.error('Error requesting available data range: %s', error);\n                if ( typeof callback === 'function' ) {\n                    callback(error);\n                }\n                return;\n            }\n            var intervalObj = extractReportableInterval(results);\n            if ( intervalObj.startDateMillis !== undefined ) {\n                intervalObj.sDate = new Date(intervalObj.startDateMillis);\n            }\n            if ( intervalObj.endDateMillis !== undefined ) {\n                intervalObj.eDate = new Date(intervalObj.endDateMillis);\n            }\n    \n            if ( typeof callback === 'function' ) {\n                callback(null, intervalObj);\n            }\n        });\n    }\n\n}\n\nfunction extractReportableInterval(results) {\n    var result,\n        i = 0,\n        repInterval;\n    for ( i = 0; i < results.length; i += 1 ) {\n        repInterval = results[i];\n        if ( repInterval.data === undefined || repInterval.data.endDate === undefined ) {\n            log.debug('No data available for %s sources %s',\n                this._helpers[i].nodeId,\n                this._helpers[i].sourceIds.join(','));\n            continue;\n        }\n        repInterval = repInterval.data;\n        if ( result === undefined ) {\n            result = repInterval;\n        } else {\n            // merge start/end dates\n            // note we don't copy the time zone... this breaks when the tz are different!\n            if ( repInterval.endDateMillis > result.endDateMillis ) {\n                result.endDateMillis = repInterval.endDateMillis;\n                result.endDate = repInterval.endDate;\n            }\n            if ( repInterval.startDateMillis < result.startDateMillis ) {\n                result.startDateMillis = repInterval.startDateMillis;\n                result.startDate = repInterval.startDate;\n            }\n        }\n    }\n    return result;\n}\n\nexport default DatumRangeFinder;\n","import { json } from 'd3-request';\nimport {\n\tDatumFilter,\n\tHttpHeaders,\n\tLogger as log,\n\tNodeDatumUrlHelper,\n\tPagination,\n\turlQuery,\n} from 'solarnetwork-api-core';\n\n/**\n * @typedef {Object} Datum\n * @property {string} created the datum date\n * @property {string} sourceId the control ID\n */\n\n/**\n * The data callback function.\n * \n * @callback DatumLoader~dataCallback\n * @param {Error} [error] an error if a failure occurred\n * @param {Datum[]} data the result data\n * @param {boolean} [done] in incremental mode, will be `true` when invoked on the *last* page of data\n * @param {Pagination} [page] in incremental mode, the page associated with the data\n */\n\n/**\n * Load data for a set of source IDs, date range, and aggregate level using the `listDatumUrl()` endpoint\n * of `NodeDatumUrlHelperMixin`.\n * \n * This object is designed to be used once per query. After creating the object and configuring an\n * asynchronous callback function with {@link DatumLoader#callback}, call {@link DatumLoader#load}\n * to startloading the data. The callback function will be called once all data has been loaded. The\n * callback function can also be passed as an argument to the {@link DatumLoader#load} method directly.\n * \n * @implements {Loader}\n * @example\n * const filter = new DatumFilter();\n * filter.nodeId = 123;\n * // configure other filter settings here...\n * \n * const urlHelper = new NodeDatumUrlHelper();\n * \n * new DatumLoader(urlHelper, filter).load((error, results) => {\n *   // results is an array of Datum objects\n * });\n */\nclass DatumLoader {\n\n\t/**\n\t * Constructor.\n\t * \n     * @param {NodeDatumUrlHelperMixin} urlHelper a URL helper for accessing node datum via SolarQuery\n\t * @param {DatumFilter} filter the filter parameters to use\n\t * @param {AuthorizationV2Builder} [authBuilder] the auth builder to authenticate requests with; if not provided\n\t *                                               then only public data can be queried\n\t */\n    constructor(urlHelper, filter, authBuilder) {\n        Object.defineProperties(this, {\n                /**\n                 * The class version.\n                 * \n                 * @memberof DatumLoader\n                 * @readonly\n                 * @type {string}\n                 */\n                version: { value: '1.0.0' }\n\t\t});\n\n\t\t/** @type {NodeDatumUrlHelper} */\n\t\tthis.urlHelper = urlHelper || new NodeDatumUrlHelper();\n\n\t\t/** @type {DatumFilter} */\n\t\tthis.filter = filter || new DatumFilter({nodeIds:this.urlHelper.nodeIds});\n\n\t\t/** @type {AuthorizationV2Builder} */\n\t\tthis.authBuilder = authBuilder;\n\n        /**\n\t\t * @type {DatumLoader~dataCallback}\n\t\t * @private\n\t\t */\n        this._finishedCallback = undefined;\n\n        /**\n\t\t * @type {object}\n\t\t * @private\n\t\t */\n\t\tthis._urlParameters = undefined;\n\t\t\n        /**\n\t\t * @type {json}\n\t\t * @private\n\t\t */\n\t\tthis.jsonClient = json;\n\t\t\n\t\t/**\n\t\t * When `true` then call the callback function for every page of data as it becomes available.\n\t\t * Otherwise the callback function will be invoked only after all data has been loaded.\n\t\t * @type {boolean}\n\t\t * @private\n\t\t */\n\t\tthis._incrementalMode = false;\n\n\t\t/**\n\t\t * @type {number}\n\t\t * @private\n\t\t */\n\t\tthis._state = 0;\n\n\t\t/**\n\t\t * @type {Datum[]}\n\t\t * @private\n\t\t */\n\t\tthis._results = undefined;\n    }\n\n\t/**\n\t * Get or set a JSON client function to use. The function must be compatible with `d3.json`\n\t * and defaults to that.\n\t *\n\t * @param {function} [value] the JSON client function, compatible with `d3.json`\n\t * @returns {function|DatumLoader} when used as a getter, the JSON client function, otherwise this object\n\t */\n\tclient(value) {\n        if ( !value ) return this.jsonClient;\n\t\tif ( typeof value === 'function' ) {\n\t\t\tthis.jsonClient = value;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get or set the callback function, invoked after all data has been loaded. The callback\n\t * function will be passed two arguments: an error and the results. In incremental mode,\n\t * the callback will also be passed a boolean that will be `true` on that last page of data,\n\t * and a `Pagination` that details which page the callback represents.\n\t *\n\t * @param {DatumLoader~dataCallback} [value] the callback function to use\n\t * @returns  {DatumLoader~dataCallback|DatumLoader} when used as a getter, the current callback function, otherwise this object\n\t */\n\tcallback(value) {\n\t\tif ( !value ) { return this._finishedCallback; }\n\t\tif ( typeof value === 'function' ) {\n\t\t\tthis._finishedCallback = value;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get or set additional URL parameters. The parameters are set as object properties.\n\t * If a property value is an array, multiple parameters for that property will be added.\n\t *\n\t * @param {object} [value] the URL parameters to include with the JSON request\n\t * @returns {object|DatumLoader} when used as a getter, the URL parameters, otherwise this object\n\t */\n    parameters(value) {\n\t\tif ( !value ) return this._urlParameters;\n\t\tif ( typeof value === 'object' ) {\n\t\t\tthis._urlParameters = value;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get or set _incremental mode_ for loading the data.\n\t * \n\t * When incremental mode is enabled (set to `true`) then the callback function will be invoked\n\t * for _each result page_ that is loaded. The function will be passed a second `boolean` argument\n\t * that will be set to `true` only on the last page of result data, and a third Pagination`\n\t * object argument that details the starting offset of the page.\n\t * \n\t * When incremental mode is disabled (set to `false`, the default) then all result pages are\n\t * combined into a single array and the callback will be invoked just once.\n\t * \n\t * @param {boolean} [value] the incremental mode to set \n\t * @returns {boolean|DatumLoader} when used a a getter, the incremental mode; otherwise this object\n\t */\n\tincremental(value) {\n\t\tif ( value === undefined ) return this._incrementalMode;\n\t\tthis._incrementalMode = !!value;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Initiate loading the data.\n\t * \n\t * As an alternative to configuring the callback function via the {@link DatumLoader#callback}\n\t * method,a callback function can be passed as an argument to this function. That allows this\n\t * function to be passed to things like `queue.defer`, for example.\n\t *\n\t * @param {DatumLoader~dataCallback} [callback] a callback function to use; either this argument must be provided\n\t *                              or the function must have already been configured via {@link DatumLoader#callback}\n\t * @returns {DatumLoader} this object\n\t */\n\tload(callback) {\n\t\t// to support queue use, allow callback to be passed directly to this function\n\t\tif ( typeof callback === 'function' ) {\n\t\t\tthis._finishedCallback = callback;\n\t\t}\n\t\tthis._state = 1;\n\t\tthis.loadData();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Invoke the configured callback function.\n\t * \n\t * @param {Error} [error] an optional  error\n\t * @param {boolean} done `true` if there is no more data to load\n\t * @param {Pagination} [page] the incremental mode page\n\t * @returns {void}\n\t * @private\n\t */\n\thandleResults(error, done, page) {\n\t\tif ( done ) {\n\t\t\tthis._state = 2; // done\n\t\t}\n\n\t\tif ( this._finishedCallback ) {\n\t\t\tlet args = [error, this._results];\n\t\t\tif ( this._incrementalMode ) {\n\t\t\t\targs.push(done);\n\t\t\t\targs.push(page);\n\t\t\t}\n\t\t\tthis._finishedCallback.apply(this, args);\n\t\t}\n\t}\n\n\t/**\n\t * Load a single page of data, starting at a specific offset.\n\t * \n\t * @param {Pagination} [page] the page to load\n\t * @returns {void}\n\t * @private\n\t */\n\tloadData(page) {\n\t\tlet pagination = (page instanceof Pagination ? page : new Pagination());\n\t\tlet url = this.urlHelper.listDatumUrl(this.filter, undefined, pagination);\n\t\tif ( this._urlParameters ) {\n\t\t\tlet queryParams = urlQuery.urlQueryEncode(this._urlParameters);\n\t\t\tif ( queryParams ) {\n\t\t\t\turl += '&' + queryParams;\n\t\t\t}\n\t\t}\n\t\tconst authBuilder = this.authBuilder;\n\t\tthis.jsonClient(url)\n\t\t\t.on('beforesend', (request) => {\n\t\t\t\tif ( !authBuilder ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tauthBuilder.reset().snDate(true).url(url);\n\t\t\t\trequest.setRequestHeader(HttpHeaders.X_SN_DATE, authBuilder.requestDateHeaderValue);\n\t\t\t\trequest.setRequestHeader(HttpHeaders.AUTHORIZATION, authBuilder.buildWithSavedKey());\n\t\t\t}).on('load', (json) => {\n\t\t\t\tlet dataArray = datumExtractor(json);\n\t\t\t\tif ( dataArray === undefined ) {\n\t\t\t\t\tlog.debug('No data available for %s', url);\n\t\t\t\t\tthis.handleResults();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tconst incMode = this._incrementalMode;\n\t\t\t\tconst nextOffset = offsetExtractor(json);\n\n\t\t\t\tif ( this._results === undefined || incMode ) {\n\t\t\t\t\tthis._results = dataArray;\n\t\t\t\t\t\n\t\t\t\t\t// discover page size, if pagination does not already have one\n\t\t\t\t\tif ( pagination.max < 1 ) {\n\t\t\t\t\t\tconst max = pageSizeExtractor(json);\n\t\t\t\t\t\tif ( max > 0 ) {\n\t\t\t\t\t\t\tpagination = new Pagination(max, pagination.offset);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( incMode ) {\n\t\t\t\t\t\tthis.handleResults(undefined, nextOffset < 1, pagination);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis._results = this._results.concat(dataArray);\n\t\t\t\t}\n\n\t\t\t\t// see if we need to load more results\n\t\t\t\tif ( nextOffset > 0 ) {\n\t\t\t\t\tthis.loadData(pagination.withOffset(nextOffset));\n\t\t\t\t} else if ( !incMode ) {\n\t\t\t\t\tthis.handleResults(undefined, true);\n\t\t\t\t}\n\t\t\t}).on('error', (error) => {\n\t\t\t\tlog.error('Error requesting data for %s: %s', url, error);\n\t\t\t\tthis.handleResults(new Error(`Error requesting data for ${url}: ${error}`));\n\t\t\t})\n\t\t\t.get();\n\t}\n\n}\n\n/**\n * Extract the datum list from the returned data.\n * \n * @param {object} json the JSON results to extract from\n * @returns {Datum[]} the extracted data\n * @private\n */\n\nfunction datumExtractor(json) {\n\tif ( json.success !== true || json.data === undefined || Array.isArray(json.data.results) !== true ) {\n\t\treturn undefined;\n\t}\n\treturn json.data.results;\n}\n\n/**\n * Extract the page size from the returned data.\n * \n * @param {object} json the JSON results to extract from\n * @returns {number} the extracted page size\n * @private\n */\nfunction pageSizeExtractor(json) {\n\tconst data = json.data;\n\treturn (data.returnedResultCount + data.startingOffset < data.totalResults\n\t\t\t? data.returnedResultCount\n\t\t\t: 0);\n}\n\n/**\n * Extract the \"next\" offset to use based on the returned data.\n * \n * @param {object} json the JSON results to extract from\n * @returns {number} the extracted offset\n * @private\n */\nfunction offsetExtractor(json) {\n\tconst data = json.data;\n\treturn (data.returnedResultCount + data.startingOffset < data.totalResults\n\t\t\t? (data.returnedResultCount + data.startingOffset)\n\t\t\t: 0);\n}\n\nexport default DatumLoader;\n","import { queue } from 'd3-queue';\n\n/**\n * Interface for classes that can be used to load data for {@link MultiLoader}.\n *\n * @interface Loader\n */\n\n /**\n * The loader callback function.\n * \n * @callback Loader~dataCallback\n * @param {Error} [error] an error if a failure occurred\n * @param {Object} data the result data\n */\n\n/**\n * Load data asynchronously with a callback.\n *\n * @function\n * @name Loader#load\n * @param {Loader~dataCallback} callback the callback to invoke with the results\n * @returns {Loader} the loader object\n */\n\n/**\n * The data callback function.\n * \n * @callback MultiLoader~dataCallback\n * @param {Error} [error] an error if a failure occurred\n * @param {Object[]} data the result data from all loaders\n */\n\n/**\n * Load data from multiple {@link Loader} objects, invoking a callback function\n * after all data has been loaded. Call {@link MultiLoader#load} to start loading the data.\n * \n * The {@link DatumLoader} class conforms to the {@link Loader} interface, so can be used to\n * load arrays of {@link Datum} objects based on search criteria.\n * \n * @example\n * const filter1 = new DatumFilter();\n * filter1.nodeId = 123;\n * // configure other filter settings here...\n * \n * const filter2 = new DatumFilter();\n * filter2.nodeId = 234;\n * // configure other filter settings here\n * \n * const urlHelper = new NodeDatumUrlHelper();\n * \n * new MultiLoader([\n *   new DatumLoader(urlHelper, filter1),\n *   new DatumLoader(urlHelper, filter2),\n * ]).load((error, results) => {\n *   // results is a 2-element array of Datum arrays\n * });\n */\nclass MultiLoader {\n    \n\t/**\n\t * Constructor.\n\t *\n\t * @param {Loader[]} loaders - array of loader objects\n\t */\n    constructor(loaders) {\n        Object.defineProperties(this, {\n                /**\n                 * The class version.\n                 * \n                 * @memberof MultiLoader\n                 * @readonly\n                 * @type {string}\n                 */\n                version: { value: '1.0.0' }\n\t\t});\n\n\t\t/**\n\t\t * @type {Loader[]}\n\t\t * @private\n\t\t */\n\t\tthis._loaders = loaders;\n\t\t\n\t\t/**\n\t\t * @type {MultiLoader~dataCallback}\n\t\t * @private\n\t\t */\n\t\tthis._finishedCallback = undefined;\n\t\t\n    }\n\n\t/**\n\t * Initiate loading the data. This will call {@link Loader#load} on each\n\t * supplied loader, in parallel. As an alternative to configuring the callback function via\n\t * the {@link MultiLoader#callback} method, a callback function can be passed as an argument\n\t * to this function. This allows this function to be passed to `queue.defer`, for example.\n\t *\n\t * @param {MultiLoader~dataCallback} [callback] a callback function to use; either this argument must be provided\n\t *                              or the function must have already been configured via  {@link MultiLoader#callback}\n\t * @returns {MultiLoader} this object\n\t */\n\tload(callback) {\n\t\t// to support queue use, allow callback to be passed directly to this function\n\t\tif ( typeof callback === 'function' ) {\n\t\t\tthis._finishedCallback = callback;\n\t\t}\n\t\tconst q = queue();\n\t\tthis._loaders.forEach((e) => {\n\t\t\t// queue.defer will invoke the callback with a `null` `this` object, so can't pass `e.load` directly here\n\t\t\tq.defer((cb) => {\n\t\t\t\te.load(cb);\n\t\t\t});\n\t\t});\n\t\tq.awaitAll((error, results) => {\n\t\t\tif ( this._finishedCallback ) {\n\t\t\t\tthis._finishedCallback.call(this, error, results);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get or set the callback function, invoked after all data has been loaded. The callback\n\t * function will be passed two arguments: an error and the results as an array of results\n\t * from each configured {@link Loader}.\n\t *\n\t * @param {MultiLoader~dataCallback} [value] the callback function to use\n\t * @returns  {MultiLoader~dataCallback|MultiLoader} when used as a getter, the current callback function, otherwise this object\n\t */\n\tcallback(value) {\n\t\tif ( !value ) { return this._finishedCallback; }\n\t\tif ( typeof value === 'function' ) {\n\t\t\tthis._finishedCallback = value;\n\t\t}\n\t\treturn this;\n\t}\n\n}\n\nexport default MultiLoader;\n"]}